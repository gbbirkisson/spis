---
name: Release

on:
  push:
    branches: dist

env:
  RUST_VERSION: "1.65.0"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-gui:
    name: Build GUI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup trunk
        uses: supplypike/setup-bin@v1
        with:
          uri: https://github.com/thedodd/trunk/releases/download/v0.16.0/trunk-x86_64-unknown-linux-gnu.tar.gz
          name: trunk

      - name: Install trunk
        uses: jetli/trunk-action@v0.1.0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown

      - name: Build gui
        run: make release-gui

      - name: Store GUI artifacts
        uses: actions/upload-artifact@v3
        with:
          name: gui-artifacts
          path: spis-gui/dist

  prep-db:
    name: Create DB
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-
          restore-keys: ${{ runner.os }}-sqlx-
      
      - name: Setup DB
        run: make dev/api/state/spis.db
      
      - name: Store DB artifacts
        uses: actions/upload-artifact@v3
        with:
          name: db-artifact
          path: dev/api/state/spis.db

  build-server:
    name: Build server for ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs:
      - build-gui
      - prep-db

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          override: true

      - name: Get DB artifact
        uses: actions/download-artifact@v3
        with:
          name: db-artifact

      - name: Get GUI artifacts
        uses: actions/download-artifact@v3
        with:
          name: gui-artifacts

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: -p spis-server --features release --release --target ${{ matrix.target }}

      - name: Store server artifact
        uses: actions/upload-artifact@v3
        with:
          name: server-artifact-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/spis-server

  release-assets:
    name: Create release assets
    runs-on: ubuntu-latest
    needs: build-server

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get x86_64 server artifact
        uses: actions/download-artifact@v3
        with:
          name: server-artifact-x86_64-unknown-linux-gnu

      - name: Get armv7 server artifact
        uses: actions/download-artifact@v3
        with:
          name: server-artifact-armv7-unknown-linux-gnueabihf

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0-20
          platforms: all

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: docker/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:FIX
          platforms: linux/amd64,linux/arm/v7
